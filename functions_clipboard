# This file contains functions used for moving(cutting), copying and pasting files and directories from one folder to another
# Please check the README file for more details
#
# GLOBAL VARIABLES
#
clipboardScriptDir=~;
# file which is used by functions to build and execute the paste command
# it also ensures the paste operations are persistent, they can also be performed if the system is rebooted
commandFile=$clipboardScriptDir/.pasteCommand;
# temporary files used for various operations
temp_file=$scriptDir/.temp;
aux_temp_file=$scriptDir/.aux_temp;
# maximum number of files/dirs listed from current directory before user enters the keyword for move/copy
maxNrOfItems=50;
maxNrOfChars=25; #maximum number of characters to be displayed for each item from current directory
# determines if files are overridden without asking the user
overrideFiles=false;
#
# FUNCTIONS
#
# This function creates the command for the move/copy operation
function clipboard {
    # helper function used for displaying the content of the current directory
    function displaySourceDirContent {
	# get number of items from current directory
	ls | tee "$aux_temp_file" | head -"$maxNrOfItems" > "$temp_file";
	tempOutput=`wc -l "$aux_temp_file"`;
	nrOfItems=`echo $tempOutput | cut -f 1 -d ' '`;
	> "$aux_temp_file";
	# limit the number of characters displayed for each item so current directory content is correctly displayed
	# (otherwise the content might be too much expanded)
	while read currentEntry;
	do
	    if [[ ${#currentEntry} -gt $maxNrOfChars ]]; then
		if [[ -d "$currentEntry" ]]; then
		    echo "${currentEntry:0:$maxNrOfChars}../" >> "$aux_temp_file";
		else
		    echo "${currentEntry:0:$maxNrOfChars}..." >> "$aux_temp_file";
		fi
	    else
		if [[ -d "$currentEntry" ]]; then
		    echo "$currentEntry"'/' >> "$aux_temp_file";
		else
		    echo "$currentEntry" >> "$aux_temp_file";
		fi
	    fi
	done < "$temp_file"
	rm "$temp_file";
	column "$aux_temp_file";
	if [[ $nrOfItems -gt $maxNrOfItems ]]; then
	    echo;
	    echo 'Number of items contained by current directory exceeds the displayed ones!';
	    echo 'Type :l or :ll and hit ENTER to see the complete list (press q to exit the list)';
	fi
	rm "$aux_temp_file";
    }
    #
    # Step 1: check arguments, decide the which operation will be performed (move/copy/override/interactive)
    #
    # second argument can only have value -o (override files automatically when pasting) or no value
    if [[ ! -z $2 ]] && [[ '-o' != $2 ]]; then
	> "$commandFile";
	echo "Invalid second argument: $2";
	echo 'Clipboard erased';
	echo 'Please enter -o or no value';
	unset -f displaySourceDirContent;
	return 1;
    elif [[ -z $2 ]]; then
	overrideFiles=false;
    else
	overrideFiles=true;
    fi
    # first argument specifies the operation type (move/copy), no other value allowed
    if [[ -z $1 ]]; then
	echo 'No argument entered to specify the requested operation (move/copy)';
	echo 'Valid arguments: [--move] [--copy]';
	unset -f displaySourceDirContent;
	return 1;
    elif [[ '--move' == $1 ]]; then
	if [[ false == $overrideFiles ]]; then
	    operation='mv -iv';
	else
	    operation='mv -v';
	fi
    elif [[ '--copy' == $1 ]]; then
	if [[ false == $overrideFiles ]]; then
	    operation='cp -irv';
	else
	    operation='cp -rv';
	fi
    else
	echo "Invalid first argument $1, no such operation";
	unset -f displaySourceDirContent;
	return 1;
    fi
    #
    # Step 2: request (mandatory) keyword from user (keyword used to determine the files/directories to be moved/copied)
    while [[ '1' == '1' ]]; do
	echo '1. Current directory:';
	echo `pwd`;
	echo;
	echo '2. Items contained (hidden ones are excluded):';
	echo;
	displaySourceDirContent;
	echo;
	echo "3. Clipboard operation: ${1:2}";
	echo;
	echo -n '4. Interactive (ask before overridding files): ';
	if [[ false == $overrideFiles ]]; then
	    echo 'yes';
	else
	    echo 'no';
	fi
	echo;
	echo 'Enter keyword: ';
	read -e keyword;
	clear;
	if [[ -z $keyword ]]; then
	    > "$commandFile";
	    echo 'No input. Clipboard erased';
	    echo 'Please try again';
	    unset -f displaySourceDirContent;
	    return 1;
	elif [[ $keyword == ':l' ]]; then
	    ls -p | column | less;
	elif [[ $keyword == ':ll' ]]; then
	    ls -lh | less;
	else
	    break;
	fi
    done
    #
    # Step 3: build the paste command that will actually move the required files to the chosen directory (when the paste function is called)
    echo $operation > "$commandFile";
    echo `pwd` >> "$commandFile";
    echo "$keyword" >> "$commandFile";
    echo "The ${1:2} command has been successfully built";
    echo "Keyword: $keyword";
    echo 'Please choose the destination directory and run the paste function to execute it';
    unset -f displaySourceDirContent;
    return 0; 
}
# This function emulates a 'PASTE' operation
function paste {
    # check that the file that contains the components of the paste command exists
    if [[ ! -f "$commandFile" ]]; then
	echo "Parameters file $commandFile does not exist";
	echo 'Please run the clipboard function (type clipboardHelp for more details)';
	return 1;
    fi 
    # read the command components and build the paste command
    operation=`sed -n '1p' $commandFile`;
    sourceDir=`sed -n '2p' $commandFile`;
    destDir=`pwd`;
    keyword=`sed -n '3p' $commandFile`;
    # decide on the type of "paste" operation (move/copy)
    if [[ -z $operation ]]; then
	echo 'The clipboard is empty';
	echo 'Please run the clipboard function (type clipboardHelp for more details) and then try again';
	return 1;
    elif [[ $operation == 'mv -iv' ]] || [[ $operation == 'mv -v' ]]; then
	action='move';
    elif [[ $operation == 'cp -irv' ]] || [[ $operation == 'cp -rv' ]]; then
	action='copy';
    else
	> "$commandFile";
	echo "Incorrect entry in the command file. Clipboard erased";
	echo 'Please run the clipboard function (type clipboardHelp for more details) and then try again';
	return 1;
    fi
    # check that the source directory is valid
    if [[ ! -d "$sourceDir" ]]; then
	> "$commandFile";
	echo "Invalid source directory $sourceDir";
	echo 'It might have been deleted, renamed or moved';
	echo 'Clipboard erased';
	return 1;
    fi
    # check that the keyword used for determining the files to be moved/copied exists
    if [[ -z $keyword ]]; then
	> "$commandFile";
	echo 'No keyword found. Clipboard erased';
	echo 'Please run the clipboard function (type clipboardHelp for more details) and then try again';
	return 1;
    fi
    # ensure the source and destination directory are NOT the same
    if [[ "$sourceDir" == "$destDir" ]]; then
	echo "Cannot $action. Source and destination directory are the same";
	return 1;
    fi 
    # if the paste command components are all correct, build the paste command and execute it from the source directory
    command="$operation $keyword \"$destDir\"";
    cd "$sourceDir";
    echo "Started the $action operation";
    echo;
    eval "$command";
    status=$?;
    # provide status of command execution and erase the content of the command file if required
    if [[ 0 -eq $status ]]; then
	echo;
	echo "Finished the $action operation";
    else
	echo "The $action operation finished with errors or user chose to override only part of the content";
	echo 'Please check the source and destination directories';
    fi
    if [[ $action == 'move' ]]; then
	> "$commandFile";
	echo 'Clipboard erased';
	echo 'For a new operation please run the clipboard function (type clipboardHelp for more details)';
    else
	echo 'Clipboard NOT erased';
	echo 'The copy operation can be repeated in the same or in a different directory';
    fi
    # return to destination directory (from which the function was executed)
    cd - > /dev/null;
    return 0; 
}
# this function empties the clipboard
function emptyClipboard {
    > "$commandFile";
    echo 'Clipboard erased';
    return 0;
}
# this function displays the clipboard
function displayClipboard {
    if [[ ! -s "$commandFile" ]]; then
	echo 'The clipboard is empty!';
    else
	firstLine=`sed '1q;d' "$commandFile"`;
	secondLine=`sed '2q;d' "$commandFile"`;
	thirdLine=`sed '3q;d' "$commandFile"`;
	echo 'The paste command is:';
	echo "$firstLine $secondLine/$thirdLine [destination directory]";
        echo 'The user should cd to the chosen destination directory before running the paste function';
    fi
    return 0;
}
# this function provides help to the user regarding usage of the other functions
function clipboardHelp {
    echo;
    echo 'Usage';
    echo;
    echo '1. Please run the clipboard function from the directory you wish to move or copy files from';
    echo;
    echo '   Enter as first argument (mandatory):';
    echo '   [--move]: if you would like to move files/folders to another directory';
    echo '   [--copy]: if you would like to copy files/folders to another directory';
    echo;
    echo '   Enter as second argument (optional):';
    echo '   [no argument]: if you would like to be prompted when overriding existing files';
    echo '   [-o]: if you would like to override exiting files without being prompted';
    echo;
    echo '2. Enter the required filename (use wildcards to select multiple files or dirs) and hit RETURN/ENTER';
    echo;
    echo '3. Go to the destination directory (using cd or a script) and run the paste function';
    echo;
    echo;
    echo 'Final notes';
    echo;
    echo 'A. You can use the paste function multiple times if a copy operation has been initiated';
    echo;
    echo 'B. The source and destination directories must be different';
    echo;
    echo 'C. Following functions can also be used:';
    echo '   emptyClipboard: to empty the file that contains the paste command (built by the clipboard function)';
    echo '   displayClipboard: to display the paste command';
    echo;
}

unset -f displaySourceDirContent;
