# This file contains functions used for moving(cutting), copying and pasting files and directories from one folder to another
#
# GLOBAL VARIABLES
#
clipboardScriptDir=`pwd`;
# file which is used by functions to build and execute the paste command
# it also ensures the paste operations are persistent, they can also be performed if the system is rebooted
commandFile=$clipboardScriptDir/.pasteCommand;
#
# This function creates the command for the move/copy operation
function clipboard {
    # Step 1: check arguments, decide the which operation will be performed (move/copy/override/interactive)
    #
    # second argument can only have value -o (override files automatically when pasting) or no value
    if [[ ! -z $2 ]] && [[ '-o' != $2 ]]; then
	echo "Invalid second argument $2";
	echo 'Please enter -o or no value';
	> "$commandFile";
	return 1;
    fi
    # first argument specifies the operation type (move/copy), no other value allowed
    if [[ -z $1 ]]; then
	echo 'No argument entered to specify the requested operation (move/copy)';
	echo 'Valid arguments: [--move] [--copy]';
	return 1;
    elif [[ '--move' == $1 ]]; then
	if [[ -z $2 ]]; then
	    operation='mv -i';
	elif [[ "-o" == $1 ]]; then
	    operation='mv';
	fi
    elif [[ '--copy' == $1 ]]; then
	if [[ -z $2 ]]; then
	    operation='cp -ir';
	elif [[ "-o" == $1 ]]; then
	    operation='cp -r';
	fi
    else
	echo "Invalid first argument $1, no such operation";
	return 1;
    fi
    #
    # Step 2: request (mandatory) keyword from user (keyword used to determine the files/directories to be moved/copied)
    echo 'Enter keyword: ';
    read keyword;
    if [[ -z $keyword ]]; then
	echo 'No input. Please try again';
	> "$commandFile";
	return 1;
    fi
    #
    # Step 3: build the paste command that will actually move the required files to the chosen directory (when the paste function is called)
    echo $operation > "$commandFile";
    echo `pwd` >> "$commandFile";
    echo "$keyword" >> "$commandFile";
    return 0; 
}
# This function emulates a 'PASTE' operation
function psit {
    # check that the file that contains the components of the paste command exists
    if [[ ! -f "$commandFile" ]]; then
	echo "Parameters file $commandFile does not exist";
	echo 'Please run the clipboard command with one of the allowed arguments';
	return 1;
    fi 
    # read the command components and build the paste command
    operation=`sed -n '1p' $commandFile`;
    sourceDir=`sed -n '2p' $commandFile`;
    destDir=`pwd`;
    keyword=`sed -n '3p' $commandFile`;
    # decide on the type of "paste" operation (move/copy)
    if [[ -z $operation ]]; then
	echo 'The clipboard is empty';
	echo 'Please run the clipboard command with one of the allowed arguments and then try again';
	return 1;
    elif [[ $operation == 'mv -i' ]] || [[ $operation == 'mv' ]]; then
	action='move';
    elif [[ $operation == 'cp -ir' ]] || [[ $operation == 'cp -r' ]]; then
	action='copy';
    else
	echo "Incorrect entry in the command file. Erasing file content";
	echo 'Please run the clipboard command with one of the allowed arguments and the try again';
	> "$commandFile";
	return 1;
    fi
    # check that the source directory is valid
    if [[ ! -d "$sourceDir" ]]; then
	echo "Invalid source directory $sourceDir";
	echo 'It might have been deleted, renamed or moved';
	> "$commandFile";
	return 1;
    fi
    # check that the keyword used for determining the files to be moved/copied exists
    if [[ -z $keyword ]]; then
	echo 'No keyword found';
	echo 'Please run the clipboard command with one of the allowed arguments and then try again';
	> "$commandFile";
	return 1;
    fi
    # ensure the source and destination directory are NOT the same
    if [[ "$sourceDir" == "$destDir" ]]; then
	echo "Cannot $action. Source and destination directory are the same";
	return 1;
    fi 
    # if the paste command components are all correct, build the paste command and execute it from the source directory
    command="$operation $keyword \"$destDir\"";
    cd "$sourceDir";
    eval "$command";
    # flush the command file if the paste operation was a move operation or the paste operation was not successful
    if [[ $? != 0 ]] || [[ $action == 'move' ]]; then
	> "$commandFile";
    fi
    # return to destination directory (from which the function was executed)
    cd - > /dev/null;
    return 0; 
}
# this function empties the clipboard
function emptyClipboard {
    > "$commandFile";
    echo 'Clipboard erased!';
    return 0;
}
# this function displays the clipboard
function displayClipboard {
    if [[ ! -s "$commandFile" ]]; then
	echo 'The clipboard is empty!';
    else
	cat "$commandFile";
    fi
    return 0;
}
