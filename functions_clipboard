# This file contains functions used for moving(cutting), copying and pasting files and directories from one folder to another
#
# GLOBAL VARIABLES
#
clipboardScriptDir=`pwd`;
# file which is used by functions to build and execute the paste command
# it also ensures the paste operations are persistent, they can also be performed if the system is rebooted
commandFile=$clipboardScriptDir/.pasteCommand;
#
# This function emulates a 'CUT' operation
function mvit {
    # decide if the moved files will override the existing ones or an interactive mode will be used (user decides if and which files are overridden or not)
    if [[ -z $1 ]]; then
	operation='mv -i';
    elif [[ $1 == "-o" ]]; then
	operation='mv';
    else 
	echo 'Wrong command option. Please try again.';
	> "$commandFile";
	return 1;
    fi 
    # request (mandatory) keyword from user (keyword used to determine the files/directories to be moved)
    echo 'Enter keyword: ';
    read keyword;
    if [[ -z $keyword ]]; then
	echo 'No input. Please try again';
	> "$commandFile";
	return 1;
    fi
    # build the paste command that will actually move the required files to the chosen directory (when the paste function is called)
    echo $operation > "$commandFile";
    echo `pwd` >> "$commandFile";
    echo "$keyword" >> "$commandFile";
    return 0; 
}
# This function emulates a 'COPY' operation
function cpit {
    # decide if the copied files will override the existing ones or an interactive mode will be used (user decides if and which files are overridden or not)
    if [[ -z $1 ]]; then
	operation='cp -ir';
    elif [[ $1 == "-o" ]]; then
	operation='cp -r';
    else 
	echo 'Wrong command option. Please try again.';
	> "$commandFile";
	return 1;
    fi 
    # request (mandatory) keyword from user (keyword used to determine the files/directories to be copied)
    echo 'Enter keyword: ';
    read keyword;
    if [[ -z $keyword ]]; then
	echo 'No input. Please try again';
	> "$commandFile";
	return 1;
    fi
    # build the paste command that will actually copy the required files to the chosen directory (when the paste function is called)
    echo $operation > "$commandFile";
    echo `pwd` >> "$commandFile";
    echo "$keyword" >> "$commandFile";
    return 0; 
}
# This function emulates a 'PASTE' operation
function psit {
    # check that the file that contains the components of the paste command exists
    if [[ ! -f "$commandFile" ]]; then
	echo "Fatal error! Parameters file $commandFile does not exist.";
	return 1;
    fi 
    # read the command components and build the paste command
    operation=`sed -n '1p' $commandFile`;
    source_dir=`sed -n '2p' $commandFile`;
    dest_dir=`pwd`;
    keyword=`sed -n '3p' $commandFile`;
    # complementary actions that can be fulfilled by the function that don't involve moving/copying files (to be implemented in separate functions)
    if [[ ! -z $1 ]]; then
	# erase the paste command
	if [[ $1 == '-f' ]]; then
	    > "$commandFile";
	    echo 'Clipboard erased!';
	    return 0;
	# display the paste command
	elif [[ $1 == '-d' ]]; then
	    echo; 
	    cat "$commandFile";
	    echo; 
	    return 0;
	else 
	    echo 'Incorrect script option. Please try again'; 
	    return 1;
	fi
    fi 
    # decide on the type of "paste" operation (move/copy)
    if [[ -z $operation ]]; then
	echo 'No move/copy command initiated. Clipboard empty.'; 
	return 1;
    elif [[ $operation == 'mv -i' ]] || [[ $operation == 'mv' ]]; then
	mvitems='yes';
    elif [[ $operation == 'cp -ir' ]] || [[ $operation == 'cp -r' ]]; then
	mvitems='no';
    else
	echo "Incorrect entry in $commandFile, file will be flushed";
	> "$commandFile";
	return 1;
    fi
    # check that the source directory is valid
    if [[ ! -d "$source_dir" ]]; then
	echo "Invalid source directory $source_dir";
	> "$commandFile";
	return 1;
    fi
    # check that the keyword used for determining the files to be moved/copied exists
    if [[ -z $keyword ]]; then
	echo 'No keyword found';
	> "$commandFile";
	return 1;
    fi
    # ensure the source and destination directory are NOT the same
    if [[ "$source_dir" == "$dest_dir" ]]; then
	if [[ $mvitems == 'yes' ]]; then
	    echo 'Cannot move. Source and destination directory are the same.'; 
	else
	    echo 'Cannot copy. Source and destination directory are the same.'; 
	fi
	return 1;
    fi 
    # if the paste command components are all correct, build the paste command and execute it from the source directory
    command="$operation $keyword $dest_dir";
    cd "$source_dir";
    eval "$command";
    # flush the command file if the paste operation was a move operation or the paste operation was not successful
    if [[ $? != 0 ]] || [[ $mvitems == 'yes' ]]; then
	> "$commandFile";
    fi
    # return to destination directory (from which the function was executed)
    cd - > /dev/null;
    return 0; 
}
